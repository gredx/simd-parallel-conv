# 测试情况

**测试概况:** 三个同样大小的数组a,b,c 数组大小为1e7   38M,计算 c=a*b  三个数组共114M



1.  不使用多线程并行计算,不使用向量化指令.  计算20轮的平均运行时间  0.02s  , 内存IO速率为5.7G/s   浮点计算的速度为5*10^8 次/s

2. 使用多线程并行计算,不使用向量化指令. 计算20轮的平均运行时间  0.015s  ,内存IO速率为9.6G/s  浮点运算速度为6.7 * 10^8次/s

3. 不使用多线程计算,使用向量化指令. 计算20轮的平均运行时间  0.01s , 内存IO速率为 11.4G/s

   浮点运算速度 10*9 次/s

4. 使用多线程,使用向量化指令. 计算20轮的平均运行时间  0.008s  内存IO速率 14.2G/s  浮点运算速度   1.25*10^9 次/s



**测试数据分析:**  

| 时间效率比值        | 无多线程,无向量指令 | 有多线程,无向量指令 | 无多线程,有向量指令 | 有多线程,有向量指令 |
| ------------------- | ------------------- | ------------------- | ------------------- | ------------------- |
| 无多线程,无向量指令 | 1                   |                     |                     |                     |
| 有多线程,无向量指令 | 0.015/0.02 = 0.75   | 1                   |                     |                     |
| 无多线程,有向量指令 | 0.01/0.02 = 0.5     | 0.01/0.015= 0.66    | 1                   |                     |
| 有多线程,有向量指令 | 0.008/0.02 = 0.4    | 0.008/0.015 = 0.53  | 0.008/0.01 = 0.8    | 1                   |

**测试数据分析结果:**

多线程的提升效率在20%~25%

向量指令的提升 50%~53%

从内存读写速度的数据上看, 本机的内存的频率是2300HZ左右,最高内存IO速度在18G/s左右,测试环境是笔记本电脑未插电源,因此,多线程+向量指令的情况下达到14G/s的读写速率已接近内存IO上限.

从结果来看,虽然向量化能一次进行8个浮点数读写计算,多线程是4线程,但速度提升远远低于理论值.原因可能是内存IO速率限制.此外,此测试程序的计算过程中,cache并不能有明显的作用,内存IO速率是限制计算速度的首要原因.在最高速度运行情况下,CPU的浮点运算速率达到1.19G次/s,本机CPU的频率是2.3GHz.测试时本机并未插电源,所以CPU运行速度也许也是一个限制因素.
$$
IO速率 = \frac{内存大小}{IO时间}
$$
